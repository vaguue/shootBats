\documentclass  [a4paper,  16 pt] {article}
\usepackage [russian] {babel}
\usepackage [left=30 mm, top=30 mm, right=30 mm, bottom=20mm, nohead, footskip=10 mm] {geometry}
\usepackage[utf8]{inputenc}
\usepackage{setspace,amsmath}
\usepackage[colorlinks, urlcolor=blue]{hyperref}
\usepackage{graphicx}
\DeclareGraphicsExtensions{.pdf,.png,.jpg}
\usepackage{floatflt}
\usepackage{float}
\usepackage{wrapfig}
\linespread{1}
\usepackage{indentfirst}

\parindent=24pt


\begin{document}

\fontsize{10}{14pt}\selectfont
\begin{center}
\hfill \break
\Large{МИНОБРНАУКИ РОССИИ} \\
\hfill \break
\small {ФЕДЕРАЛЬНОЕ ГОСУДАРСТВЕННОЕ БЮДЖЕТНОЕ ОБРАЗОВАТЕЛЬНОЕ УЧРЕЖДЕНИЕ }\\
\small { ВЫСШЕГО ПРОФЕССИОНАЛЬНОГО ОБРАЗОВАНИЯ  } \\
\hfill \break
\normalsize {\textbf{ <<САНКТ-ПЕТЕРБУРГСКИЙ ПОЛИТЕХНИЧЕСКИЙ УНИВЕРСИТЕТ } }\\
\hspace{1.25cm} {\normalsize {\textbf { ПЕТРА ВЕЛИКОГО>>}}} \\
\hfill \break
\large{Институт прикладной математики и механики }\\
\hfill \break
\large{ Высшая школа прикладной математики и вычислительной физики }\\
\hfill \break
Направление 02.03.01 Математика и компьютерные науки\\
\vskip 2.5cm
\Large {Отчёт по практической работе:}
\vskip 0.3cm
\Large{Реализация игры <<Пушки>>} \\
\hfill \break
\vskip 0.8cm
\large{Группа: 3630201/90002} \\
\vskip 3cm
\end{center}


\begin {tabular}{cccc}
\hspace{0.5cm}Обучающийся: &\underline {\hspace{3cm}} &  &Маглий Екатерина Романовна \\\\
\hspace{0.5cm}Преподаватель: &\underline {\hspace{3cm}} &  &Глазунов Вадим Валерьевич \\\\
\end{tabular}
\vskip 1.5 cm
\hspace{10cm}\def \hrf#1{\hbox to#1{\hrulefill}}<<\hrf{2em}>>  \hrf{6em}  20\hrf{1em}~r.
\vskip 2.5cm
\begin {center} Санкт-Петербург 2020 \end{center}
\thispagestyle {empty}

\newpage

\begin{center}\par \bf \abstractname
\end{center}
\par Основная задача летней практики заключалась в том, чтобы познакомить студентов с кроссплатформенным фреймворком QT для разработки ПО на языке C++. Используя знания, полученные в ходе изучения объектно-ориентированного программирования и материалы лекций по QT, было необходимо реализовать игру "Пушки". В отчете представлена данная реализация.
     
\tableofcontents 
\newpage
\section{Введение}
\par Необходимо реализовать игру <<Пушки>>. Игра на время. Суть игры заключается в попадании во врагов посредством выстрелов из пушки, находящейся в нижней центральной части экрана. В течении всей игры враги летят сверху вниз и при помощи пушки нужно их убивать. Если пользователь не успел убить врагов, т.е. враг дошел до низа, то проигрывает.

\section{Постановка задачи} 
\par Необходимо:
\begin{enumerate}
		\item реализовать визуальное отображение снарядов, находящихся в полете, движущихся врагов, отрисовку фона и наклон пушки в зависимости от точки нажатия на экран, используя графическую библиотеку QT.
		\item реализовать интерфейс, реагирующий на нажатия пользователя в любую точку экрана, позволяющий стрелять под определенным углом.
        \item реализовать расчет траектории полета снаряда и прописать рандомизированную траекторию полета врагов.
		\item реализовать расчет попадания снаряда во врага.
		\item реализовать таймер времени игры.
	\end{enumerate}
\par  Размер окна 430х600 пикселей.

\section{Реализация}
\par Было создано три класса: Background, Logic, Bat. Класс Background реализует отрисовку состояния игры и взаимодействия с пользователем. Хранит указатель на объект класса Logic, соединяет собственные слоты с его сигналами. Сам же класс Logic реализует физический аспект игры: перемещения снарядов, врагов, проверка на их столкновение. Хранит в одном из своих полей вектор объектов класса Bat, который хранит в себе все данные врага.
\subsection{Background}
\par Объект класса Background отвечает за отрисовку всех находящихся на экране объектов с определенной частотой. Данный класс наследуется от QWidget, так как QWidget это базовый класс для элемента пользовательского интерфейса, способного получать сообщения мыши и других элементов. Перегружает методы родительского класса, отвественные за получения сообщений после нажатий мыши. Класс Background имеет  поля:
\begin{verbatim} 
class Background : public QWidget {
    Q_OBJECT
    size_t height = 600, width = 430;
    bool pressed = false;
    QPixmap* img;
    QPixmap* gun;
    QPixmap* curGun;
    QPixmap* bullet;
    QPixmap* bat;
    double gunAngle = M_PI_2;
    double rotateGun(int,int);
    Logic* eL;
public slots:
    void redrawBullets();
    void finish();
protected:
    void mousePressEvent(QMouseEvent* event) override;
    void paintEvent(QPaintEvent* event) override;
    void mouseMoveEvent(QMouseEvent* event) override;
    void mouseReleaseEvent(QMouseEvent* event) override;
public:
    Background(QWidget*);
    ~Background();
};
\end{verbatim}
\par {\bfМетоды}:
\par  Background(QWidget*) -- конструктор класса, принимает в качестве аргумента родительский виджет. Инициализирует внутреннюю логику приложения, считывает изображения из файлов, соединяет сигналы внутренней логики с собственными слотами.
\par  double rotateGun(int,int) -- метод, принимающий в качестве аргументов координаты нажатия на экран. Считает тангенс угла прямой, проходящей через точку нажатия и ноль в системе координат при которой пушка находится в точке (0, 0), ось Y направлена вверх, а ось X вправо (с точки зрения наблюдателя). После чего находит сам угол (через qAtan) и строит матрицу поворота , а затем поворачивает оригинальное изображение (gun) и сохраняет результат в curGun, который и отображается на экран методом paintEvent(QPaintEvent*).
\par  void redrawBullets() -- слот, отвечающий за перерисовку экрана.
\par  void finish() -- слот, ответственный за завершение игры. Останавливает все таймеры объекта класса Logic, считает время игры, выводит завершающее сообщение с помощью QMessageBox.
\par  void mousePressEvent(QMouseEvent* event) -- обработчик нажатий. Хранит с себе статическую переменную static started=false, в зависимости от ее значения (проверка, является ли нажатия первым) либо запускает таймеры через вызов eL->initGun() (присваивая ей true), либо передает координаты нажатия в rotateGun(int,int), а затем вычесленный в последнем методе угол передает в eL->shoot(double).
\par  void paintEvent(QPaintEvent* event) -- метод, вызывающийся при отрисовке экрана, отрисовывает сначала фоновое изображение, затем все снаряды, находящиеся в полете, используя поле bullets своего поля eL (указатель на объект класса Logic, в котором происходит вычисление координат), аналогично используя поле bats своего поля eL отрисовывает всех врагов, затем отрисовывает изображение curGun, для отрисовки пушки посередине используется информация о размере фонового изображения и изображения curGun (метод size()) .
\par  void mouseMoveEvent(QMouseEvent* event) -- данный метод вызывается при перемещении курсора по экрану. Проверяется зажат ли курсор и если он зажат передает координаты в rotateGun(int, int), выстрела не производится
\par  void mouseReleaseEvent(QMouseEvent* event) -- данный метод вызывается при отпускании кнопки мыши пользователем. Фиксирует что курсор не нажат (pressed=false).
\par  Деструктор класса Background() -- освобождает всю динамически выделенную (в конструкторе) память: память под изображение, память под объект класса логики.

\par {\bfПоля}:
\par  size\_t height -- высота окна.
\par  size\_t width -- ширина окна.
\par  bool pressed -- поле, значение которого равно true когда курсор зажат и false когда нет.
\par  std::chrono::time\_point<std::chrono::system\_clock> startTime -- точка отсчета времени игры. Инициализируется при первом нажатии пользователя на экран.
\par  QPixmap* img --  указатель на фоновое изображение.
\par  QPixmap* gun -- указатель на изображение пушки.
\par  QPixmap* curGun -- указатель на изображение пушек, повернутой под углом.
\par  QPixmap* bullet -- указатель на изображение снаряда.
\par  QPixmap* bat -- указатель на изображение врага.
\par  double gunAngle -- текущий угол поворота пушки.
\par  Logic* eL -- указатель на объект класса, отвечающего за внутреннюю логику игры. Хранится в качестве указателя, так как должен быть инициализирован после инициализации объекта класса Background 


\subsection{Logic}
\par Объект класса Logic -- класс, реализующий внутреннюю логику игру. Данный класс быть должен быть производным класса QObject, чтобы иметь возможность пользоваться механизмом сигналов. В данной версии кода наследование от QFrame излишне, но сделано с целью дальнейшней разработки элементов меню. Наследуется от QFrame. Данный класс был написан с целью абстрагироваться от графического взаимодействия с пользователем. При применении шаблонов может быть использован при работе с другим фреймворком.
\par Класс Logic содержит поля:
\begin{verbatim} 
class Logic : public QFrame {
    Q_OBJECT
signals:
    void movement();
    void losed();
public:
    std::vector<std::tuple<QPointF, double, double>> bullets;
    std::vector<Bat> bats;
    int tout = 20;
    int spawnTreshold = 2000;
    double speed = 0.4;
    size_t* h;
    size_t* w;
    QPointF start;
    QTimer bulletTime;
    QTimer batTime;
    Logic(size_t* h, size_t* w, QWidget* parent = nullptr);
    void initGun();
    void shoot(double angle);
public slots:
    void timerEvent();
    void spawnerEvent();
    void batEvent();
};
\end{verbatim} 
\par {\bfМетоды}:
\par  Logic(size\_t* h, size\_t* w, QWidget* parent = nullptr) -- конструктор класса . Принимает на выход указатели на высоту и ширину экрана, а также указатель на родительский виджет.
\par  void movement() -- сигнал, сообщающий о том , что нужно заново отрисовать экран.
\par  void losed() -- сигнал, вызывающийся при достижении врагом нижней части экрана. 
\par  void initGun() -- устанавливает значение стартовой точки запуска снаряда, и запускает таймеры.
\par  void timerEvent() -- обновляет координаты из каждого снаряда из вектора bullet посредством формул x = v * t * cos(angle), y = v * sin(angle) * t + $g*t^{2}/2$ , где speed=v , t - время в полете (лежит в структуру tuple вектора bullet), причем константа g была подобрана вручную и g/2=3 . Также она проверяет, не вышел ли снаряд за границы экрана и не столкнулся ли с летящим врагом. Если снаряд вышел за границы экрана, или столкнулся с летящим врагом, то он удаляется из вектора bullet. В конце метода вызывает сигнал  movement, отвечающий за повторную отрисовку экрана.
\par  void spawnerEvent() -- отвечает за создание новых врагов. Добавляет новую структуру Bat  в вектор Bats. Координата по оси Y соответствует верхней части экрана, координата по оси X выбирается случайным числом от 0 до ширины экрана (*w).
\par  void batEvent() -- отвечает за перемещение врагов. По оси Y каждый враг имеет константную скорость, в то время как по оси X каждый враг совершает случайные движения влево или вправо.
\par  void shoot(double angle) -- добавляет элемент в вектор снарядов.


\par {\bfПоля}:
\par  std::vector<std::tuple<QPointF, double, double>> bullets -- вектор, содержащий в себе информацию о всех снарядах, находящихся в полете: текущие координаты (QPointF), время в полете (double , так как в секундах), угол запуска снаряда (double, так как в радианах).
\par  tuple -- структура данных, являющаяся набором элементов определенной длины . В данном случае равной трем.
\par  std::vector<Bat> bats -- вектор Bat, в котором находятся все находящиеся на данный момент на экране враги.
\par  int tout -- частота отрисовки экрана (в миллисекундах).
\par  int spawnTreshold -- максимальный временной интервал между появлениями врагов.
\par  double speed -- начальная скорость полета снаряда.
\par  size\_t* h -- указатель на текущую высоту экрана.
\par  size\_t* w -- указатель на текущую ширину экрана.
\par  QPointF start -- стартовая точка запуска снаряда.
\par  QTimer bulletTime -- таймер, отвечающий за перемещение снарядов в пространстве. Запускает метод timerEvent() каждые tout миллисекунды.
\par  QTimer batTime -- таймер, отвечающий за перемещение врагов. Запускает метод batEvent().


\subsection{Bat}
\par Объект класса Bat содержит в себе информацию о текущем состоянии врага и некоторые константные значения. В данном классе нет статических полей, и сделано это с целью облегчения расширения игры в будущем (добавление новых типов врагов, различные скорости у различных врагов): 
\begin{verbatim} 
class Bat {
public:
   Bat(QPointF,int hitH=5,int hitW=5); 
   int state = 0;
   int maxState = 5;
   int timeBuff = 0;
   QPointF coord; 
   size_t hitH, hitW;
   double Yspeed = 0.8;
   double Xspeed = 5;
   int changeDelay = 100;
};
\end{verbatim} 
\par Bat(QPointF,int hitH=5,int hitW=5) -- конструктор, который принимает в качестве аргументов стартовую точку (QPointF) и длину и ширину прямоугольника (окрестность координаты), при попадании снаряда в который враг умирает.
\par int state -- текущее состояние врага. Используется для анимации.
\par int maxState -- максимальное значение состояние врага.
\par int timeBuff -- переменная, использующаяся для переключения переменной state. Как только значение timeBuff становится >= changeDelay, переключается переменная state.
\par QPointF coord -- текущие координаты врага.
\par size\_t hitH, hitW -- высота и ширина прямоугольника, при попадании в который враг умирает.
\par double Yspeed -- скорость перемещения по оси Y.
\par double Xspeed -- данное значение используется при случайных передвижениях влево или вправо, на него умножается случайное число от -0,5 до 0,5, чтобы рассчитать смещение по оси X (производится проверка на не выход за пределы экрана внутри класса Logic).
\par int changeDelay -- интервал времени, за который сменяется кадр анимации врага.

\subsection{Элементы интерфейса игры}
\par Игра начинается после первого клика по любой точке окна. С этого момента сверху начинают лететь враги, случайно перемещаясь влево или вправо во время полета. Нажатие по точке окна поворачивает изображение пушки под углом, соответствующим координатам нажатия. После чего из пушки вылетает снаряд под таким же углом и при попадании во врага убивает его. Если же хотя бы один враг долетел до нижней части экрана, игра заканчивается, и пользователю выводится длительность его игры.

\newpage
\section{Тестирование}
\par На рис. 1 изображено стартовое поле до появления врагов, область игры обозначена желтой рамкой. В нижней часте экрана располагается пушка изменение угла поворота осуществляется пользователем с использованием мыши. Чтобы начать игру, пользователь должен нажать на поле внутри рамки.

%\includegraphics[width=80mm,height=80mm]{w.jpg}
%\hspace{1.8cm}
%\includegraphics[width=100mm, height=100mm]{end.jpg}\\


\begin{figure}[h]
\centering
\includegraphics[width=80mm,height=80mm]{welcome.jpg}
\caption{Начало игры}
\label{fig:mpr}
\end{figure}
\hfill \break

\par На рис.2 изображено поле, на котором сверху летят враги, и посредством пушки пользователь пытается попасть снарядами, вылетающими из пушки, убить врагов.  

\begin{figure}[h]
\centering
\includegraphics[width=80mm,height=80mm]{process.jpg}
\caption{Процесс игры}
\label{fig:mpr}
\end{figure}
\newpage

\par На рис.3 изображено окно, которое появляется после проигрыша пользователя, т.е. один из врагов долетел до низа поля. На этом окне высвечивается время (в секундах), сколько игрок провел времени в игре. При нажатии на кнопку "close" приложение закрывается.

\begin{figure}[h]
\centering
\includegraphics[width=80mm,height=80mm]{end.jpg}
\caption{Конец игры}
\label{fig:mpr}
\end{figure}

\newpage

\section{Заключение} 
\par В ходе выполнения практического задания были реализованы структуры данных, отвечающие за окно игры и ее внутреннюю логику, графическая часть была реализована с помощью QtPainter, физика игры была реализована с помощью QTimer, QMath, QRandomGenerator. 
\par Были достигнуты подзадачи данной работы: 
\par -- реализованы визуальное отображение снарядов, находящихся в полете, движущиеся враги, отрисовка фона и наклон пушки в зависимости от точки нажатия на экран посредством метода Backgroud::painterEvent(QPainterEvent*); 
\par -- реализован интерфейс, реагирующий на нажатия пользователя в любую точку экрана, позволяющий стрелять под определенным углом посредством 
\par метода Background::mousePressEvent(QMouseEvent*); 
\par -- реализован расчет траектории полета снаряда и прописана рандомизированная траектория полета врагов посредством метода Logic::timerEvent(); 
\par -- реализован расчет попадания снаряда во врага посредством метода Logic::timerEvent();
\par -- реализован таймер времени игры посредством Background::finish().

\par Благодаря реализованности всех подзадач достигнута главная задача -- реализована игра «Пушки».
\par В качестве источника для получения информации использовалась официальная документация с сайта Qt.
\par Для работы было использовано ПО: Qt 5.15 LTS и Qt Cteator.

\section{Приложение} 
{\bf mane.h}
\begin{verbatim}
 #include <iostream>
 #include <chrono>
 #include <sstream>
 #include <QWidget>
 #include <QApplication>
 #include <QLabel>
 #include <QGraphicsScene>
 #include <QGraphicsView>
 #include <QPushButton>
 #include <QGraphicsItem>
 #include <QSlider>
 #include <QProgressBar>
 #include <QMouseEvent>
 #include <QtMath>
 #include <QMessageBox>
 #include "logic.h"


 struct Background : public QWidget {
    Q_OBJECT
    size_t height = 600, width = 430;
    bool pressed = false;
    std::chrono::time_point<std::chrono::system_clock> startTime;
    QPushButton* btn;
    QPixmap* img;
    QPixmap* gun;
    QPixmap* curGun;
    QPixmap* bullet;
    QPixmap* bat;
    double gunAngle = M_PI_2;
    double rotateGun(int,int);
    Logic* eL;
public slots:
    void redrawBullets();
    void finish();
protected:
    void mousePressEvent(QMouseEvent* event) override;
    void paintEvent(QPaintEvent* event) override;
    void mouseMoveEvent(QMouseEvent* event) override;
    void mouseReleaseEvent(QMouseEvent* event) override;
    void resizeEvent(QResizeEvent* event) override;
public:
    Background(QWidget*);
    ~Background();
};
\end{verbatim}

{\bf mane.cxx}
\begin{verbatim}
#include "mane.h"


Background::Background(QWidget* parent = nullptr) : QWidget(parent) {
    img     = new QPixmap("./png/back.png");
    gun     = new QPixmap("./png/pushka.png");
    bullet  = new QPixmap("./png/shar.png");
    bat     = new QPixmap("./png/bat.png");
    width   = img->size().width();
    height  = img->size().height();
    setFixedSize(width, height);
    curGun  = new QPixmap(*gun);
    eL      = new Logic(&width, &height);
    QObject::connect(eL, SIGNAL(movement()), this, SLOT(redrawBullets()));
    QObject::connect(eL, SIGNAL(losed()), this, SLOT(finish()));
 
}

Background::~Background() {
    delete img;
    delete gun;
    delete bullet;
    delete bat;
    delete curGun;
    delete eL;
}

void Background::finish() {
    using namespace std;
    using namespace chrono;
    auto endTime = system_clock::now();
    auto duration = duration_cast<seconds>(endTime - startTime).count();
    eL->bulletTime.stop();
    eL->batTime.stop();
    stringstream ss;
    ss << "duration:" << duration;
    cout << "duration: " << duration << endl;
    QMessageBox msgBox;
    msgBox.setText("GAME OVER");
    msgBox.setInformativeText(ss.str().c_str());
    msgBox.setStandardButtons(QMessageBox::Close);
    int ret = msgBox.exec();
    QApplication::instance()->quit();
}

void Background::redrawBullets() {
    using namespace std;
    update();
}

void Background::paintEvent(QPaintEvent* event) {
    QPainter painter(this);
    painter.drawPixmap(QRect(0,0, width, height), *img); 
    for (auto& e : eL->bullets) {
        auto x = std::get<0>(e).x();
        auto y = std::get<0>(e).y();
        y = height - y;
        std::cout << "x, y: " << x << "," << y << std::endl;
        painter.drawPixmap(QRect(x, y, bullet->size().width(), bullet->size().height()), *bullet);
    }
    painter.drawPixmap(QRect((width - curGun->size().width())>>1,
                height-(curGun->size().height()>>1), curGun->size().width(), curGun->size().height()), *curGun);
    for (auto& e : eL->bats) {
        auto x = e.coord.x();
        auto y = e.coord.y();
        painter.drawPixmap(QRect(x, y, bat->size().width(), bat->size().width()), *bat);
    }
}

double Background::rotateGun(int x, int y) {
    using namespace std;
    x -= width>>1;
    y = height-y;
    double tg = (double)x/(double)y;
    gunAngle = qAtan(tg);
    cout << "angle: " << gunAngle << ", tg: " << tg << endl;
    QMatrix rm;
    rm.rotate(qRadiansToDegrees(gunAngle));
    delete curGun;
    curGun = new QPixmap(gun->transformed(rm));
    update();
    return tg;
}

void Background::mousePressEvent(QMouseEvent* event) {
    using namespace std;
    static bool started = false;
    if (!started) {
        eL->initGun();
        started = true;
        startTime = chrono::system_clock::now();
    }
    else if (event->button() == Qt::LeftButton) {
        auto point = event->pos();
        pressed = true; 
        cout << "clicked on: " << point.x() << ' ' << point.y() << endl;
        rotateGun(point.x(), point.y());
        eL->shoot(gunAngle);
    }
}


void Background::mouseMoveEvent(QMouseEvent* event) {
    using namespace std;
    if (pressed) {
        auto point = event->pos();
        cout << "moved to: " << point.x() << ' ' << point.y() << endl;
        rotateGun(point.x(), point.y());
    }
}

void Background::mouseReleaseEvent(QMouseEvent* event) {
    pressed = false;
}

void Background::resizeEvent(QResizeEvent* event) {

}
\end{verbatim}

{\bf logic.h}
\begin{verbatim}
int main(int argc, char *argv[ ])
{

QApplication app(argc, argv);
Background main;
main.show();
return app.exec();
}

#include <iostream>
#include <vector>
#include <utility>
#include <QTimer>
#include <QPoint>
#include <QFrame>
#include <QRandomGenerator>
#include <QtMath>
#include <QTimerEvent>
#include "bat.h"

struct Logic : public QFrame {
    Q_OBJECT
signals:
    void movement();
    void losed();
public:
    std::vector<std::tuple<QPointF, double, double>> bullets;
    std::vector<Bat> bats;
    int tout = 20;
    int spawnTreshold = 1000;
    double speed = 0.4;
    size_t* h;
    size_t* w;
    QPointF start;
    QTimer bulletTime;
    QTimer batTime;
    Logic(size_t* h, size_t* w, QWidget* parent = nullptr);
    void initField();
    void initGun();
    void shoot(double angle);
public slots:
//    void timerEvent(QTimerEvent*);
    void timerEvent();
    void spawnerEvent();
    void batEvent();
};
\end{verbatim}

{\bf logic.cxx}
\begin{verbatim}
#include "logic.h"

#define mk make_tuple
#define randDouble QRandomGenerator::global()->generateDouble()

Logic::Logic(size_t* w, size_t* h, QWidget* parent) : QFrame(parent), w{w}, h{h} {
    bulletTime.setInterval(tout);
    batTime.setInterval(tout);
    connect(&bulletTime, SIGNAL(timeout()), this, SLOT(timerEvent()));
    connect(&batTime, SIGNAL(timeout()), this, SLOT(batEvent()));
}

void Logic::initField() {

}

void Logic::initGun() {
    start.setX((*w)/2);
    start.setY(15);
    bulletTime.start();
    batTime.start();
    QTimer::singleShot(randDouble * spawnTreshold, this, &Logic::spawnerEvent);
}

void Logic::batEvent() {
    using namespace std;
    for (size_t i = 0; i < bats.size(); ++i) {
        //cout << i << " bat coordinates: " << bats[i].coord.x() << " " << bats[i].coord.x() << endl;
        auto x = bats[i].coord.x();  
        auto y = bats[i].coord.y();  
        if (y >= *h) {
            cout << "LOSED" << endl;
            emit losed();
        }
        else {
            //cout << "raw: " << x << " " << y << endl;
            //cout << "ceil: " << qCeil(x) << " " << qCeil(y) << endl;
            y += bats[i].Yspeed;
            bats[i].coord.setY(y);
            x = min(max(double{0+10}, x + bats[i].Xspeed*(randDouble-0.5)), double{*w-10});
            bats[i].coord.setX(x);
            bats[i].state = (bats[i].state + (bats[i].timeBuff = (bats[i].timeBuff + tout) 
                        % bats[i].changeDelay)/bats[i].changeDelay) % bats[i].maxState;
        }

    }
}

void Logic::spawnerEvent() {
    using namespace std;
    cout << "lets spawn some bat " << randDouble*(*w) << endl;
    bats.push_back(Bat(QPointF(randDouble*(*w), 0), 10, 10));
    QTimer::singleShot(randDouble * spawnTreshold, this, &Logic::spawnerEvent);
}

void Logic::shoot(double angle) {
    using namespace std;
    cout << "shooted wirh angle: " << angle << endl;
    bullets.push_back(mk(start, 0, angle));
    cout << "bullets in the air: " << bullets.size() << endl;
}

void Logic::timerEvent() {
    using namespace std;
    vector<size_t> dead;
    for (size_t i = 0; i < bullets.size(); ++i) {
        auto& e     = bullets[i];
        auto& point = get<0>(e);
        auto x      = point.x();
        auto y      = point.y();
        auto& time  = get<1>(e);
        auto angle  = get<2>(e);
        if (x <= 0 || x >= *w || y <= 0 || y >= *h) {
            cout << "dead" << endl;
            dead.push_back(i);
        }
        else {
            bool ok = false;
            auto _x = x;
            auto _y = (*h) - y;
            for (size_t i = 0; i < bats.size(); ++i) {
                if ((_x >= bats[i].coord.x() - bats[i].hitW && _x <= bats[i].coord.x() + bats[i].hitW) 
                        && (_y >= bats[i].coord.y() - bats[i].hitH && _y <= bats[i].coord.y() + bats[i].hitH)) {
                    ok = true;
                    cout << "killed " << i << endl;
                    dead.push_back(i);
                    //TODO SIGNAL
                    bats.erase(bats.begin() + i);
                    break;
                }
            }
            if (!ok) {
                cout << "s*t*cos:" << qCos(angle) << endl;
                point.setX(x + speed * tout * qSin(angle));
                point.setY(y + speed * tout * qCos(angle) - 0.01*tout*tout); //TODO
                cout << "x, y inside timerEvent: " << get<0>(bullets[i]).x() << ' ' << get<0>(bullets[i]).y() << endl;
                time += tout;
            }
        }
    }
    emit movement();
    for (size_t i = 0; i < dead.size(); ++i) {
        bullets.erase(bullets.begin() + dead[i]);
        //TODO SIGNAL
    }
}

#undef mk
 \end{verbatim}
 
 {\bf bat.h}
 \begin{verbatim}
#include <iostream>
#include <QRandomGenerator>
#include <QtMath>
#include <QPoint>

struct Bat {
   Bat(QPointF,int hitH=5,int hitW=5); 
   int state = 0;
   int maxState = 5;
   int timeBuff = 0;
   QPointF coord; 
   size_t hitH, hitW;
   double Yspeed = 0.8;
   double Xspeed = 5;
   int changeDelay = 100;
};
\end{verbatim}


{\bf bat.cxx}
 \begin{verbatim}
#include "bat.h"

Bat::Bat(QPointF start, int hitH, int hitW) : coord {start},
    hitH{hitH}, hitW{hitW} { }

\end{verbatim}
\end{document}

